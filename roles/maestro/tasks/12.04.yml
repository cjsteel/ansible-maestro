---

# ssh

## 

- name: ensure that openssh server is installed
  apt: name={{ item }} state=present
  with_items:
    - openssh-server
  tags: [ 'packages', 'ssh' ]

###### Here we use a handler via **notify:**. Handlers are run after everything else so if we have a failure before the end of our playbook the handler will not be run and this can cause confusion on playbook reruns.

- name: Disallow root SSH access
  lineinfile: dest=/etc/ssh/sshd_config
              regexp="^PermitRootLogin"
              line="PermitRootLogin no"
              state=present
  notify: ssh restart
  tags: [ 'packages', 'ssh' ]

# firewall

## fail2ban
#
# ban hosts that cause multiple authentication errors

- name: ensure that fail2ban is installed
  apt: name={{ item }} state=present
  with_items:
    - fail2ban
  tags: [ 'packages', 'fail2ban' ]

## shorewall

- name: ensure that fail2ban is installed
  apt: name={{ item }} state=present
  with_items:
    - shorewall
  tags: [ 'packages', 'shorewall' ]

# pause then get shorewall status, if status running then... if stopped then.

# We need to get the active interface name!
- name: Copy etc_shorewall_interfaces, backup remote version if it is not the same.
  copy: src=etc_shorewall_interfaces dest=/etc/shorewall/interfaces owner=root group=root mode=644 backup=yes
  tags: [ 'packages', 'shorewall' ]

- name: Copy etc_shorewall_policy, backup remote version if it is not the same.
  copy: src=etc_shorewall_policy dest=/etc/shorewall/policy owner=root group=root mode=644 backup=yes
  tags: [ 'packages', 'shorewall' ]

# IMPORTANT - WE HIDE THE RULES FILE IN .private BECAUSE IT CONTAINS FIREWALL INFO

- name: Copy /etc/shorewall/rules, backup remote version if it is not the same.
  copy: src=.private/etc_shorewall_rules dest=/etc/shorewall/rules owner=root group=root mode=644 backup=yes
  tags: [ 'packages', 'shorewall' ]

- name: Copy /etc/shorewall/zones, backup remote version if it is not the same.
  copy: src=etc_shorewall_zones dest=/etc/shorewall/zones owner=root group=root mode=644 backup=yes
  tags: [ 'packages', 'shorewall' ]

## ufw 

### When shorewall is installed we need to disable ufw

- name: disable ufw
  shell: ufw disable
  tags: [ 'packages', 'shorewall' ]

#  notify: ufw disable

## Configure shorewall to start on boot and start shorewall
#
# We probably want to force this to start before the script is completed eh?

- name: Copy /etc/default/shorewall, backup remote version if it is not the same.
  copy: src=etc_default_shorewall dest=/etc/default/shorewall owner=root group=root mode=644 backup=yes
  notify: shorewall restart
  tags: [ 'packages', 'shorewall' ]

# pause then get shorewall status

# test shorewall

# sudo shorewall check
#
# look for "Shorewall configuration verified" in output


- name: shorewall check
  shell: shorewall check
  tags: [ 'packages', 'shorewall' ]

## install unattended-upgrades

- name: Disallow root SSH access
  apt: name={{ item }} state=present
  with_items:
    - unattended-upgrades
  tags: [ 'packages', 'usecurity' ]

### Configure unattended-upgrades

- name: Copy /etc/apt/apt.conf.d/50unattended-upgrades and backup remote version if different.
  copy: src=etc_apt_apt.conf.d_50unattended-upgrades dest=/etc/apt/apt.conf.d/50unattended-upgrades owner=root group=root mode=644 backup=yes
  tags: [ 'packages', 'unattended-upgrades' ]

- name: Copy /etc/apt/apt.conf.d/10periodic and backup remote version if different.
  copy: src=etc_apt_apt.conf.d_10periodic dest=/etc/apt/apt.conf.d/10periodic owner=root group=root mode=644 backup=yes
  tags: [ 'packages', 'unattended-upgrades' ]


  notify: cups restart

## time server

### install ntp

- name: intall ntp
  apt: name={{ item }} state=present
  with_items:
    - ntp
  tags: [ 'packages', 'ntp' ]

# gnome3

- name: Add the gnome3 repository
  apt_repository: repo='ppa:gnome3-team/gnome3' state=present
  tags: [ 'packages', 'gnome3' ]

- name: update apt cache
  apt: update_cache=yes cache_valid_time=43200
  tags: [ 'packages', 'gnome3' ]

- name: Install packages, variables defined in ../default/main.yml
  apt: name={{ item }} state=present
  with_flattened:
     - "{{ gnome_3_debs }}"
  tags: [ 'packages', 'gnome3' ]

# UPS

- name: Install APC UPS apcupsd
  apt: name={{ item }} state=present
  with_items:
    - apcupsd
  tags: [ 'packages', 'build-essential' ]

## nano /etc/apcupsd/apcupsd.conf

- name: /etc/apcupsd/apcupsd.conf and backup remote version if different.
  copy: src=etc_apcupsd_apcupsd.conf dest=/etc/apcupsd/apcupsd.conf owner=root group=root mode=644 backup=yes
  tags: [ 'packages', 'ups' ]
  notify: apcupsd restart


## nano /etc/default/apcupsd

- name: /etc/default/apcupsd and backup remote version if different.
  copy: src=etc_default_apcupsd dest=/etc/default/apcupsd owner=root group=root mode=644 backup=yes
  tags: [ 'packages', 'ups' ]
  notify: apcupsd restart

# test apcupsd here

# development tools

## build-essential

- name: Installing build-essential.
  apt: name={{ item }} state=present
  with_items:
    - build-essential
  tags: [ 'packages', 'build-essential' ]

## image processing

- name: install image processing tools
  apt: name={{ item }} state=present
  with_items:
    - imagemagick
  tags: [ 'packages', 'imaging' ]

# System Administration tools and utilities

## gparted

### addition filesystems support for gparted

#- name: Install exfat files system and utilities
#  apt: name={{ item }} state=present
#  with_items:
#    - bla_bla_bla
#  tags: [ 'packages', 'sysadmin', 'filesystems', 'gparted' ]

## gparted

- name: Install gparted.
  apt: name={{ item }} state=present
  with_items:
    - gparted
  tags: [ 'packages', 'sysadmin', 'filesystems', 'gparted' ]

## Tools

- name: install curl - transfer a URL
  apt: name={{ item }} state=present
  with_items:
    - curl
  tags: [ 'packages', 'sysadmin' ]

# User Security

## Password utilities

### Password generators

- name: install password stuff
  apt: name={{ item }} state=present
  with_items:
    - libpam-cracklib
    - pwgen

### Ensure for sufficient password complexity

# Set so passwords require:
# * minimum of 8 characters
# * one or more upper case
# * one or more digits
# * one or more other (special) character(s)

- name: Copy default /etc/pam.d/common-password, backup remote version if it is not the same.
  copy: src=etc_pam.d_common-password dest=/etc/pam.d/common-password owner=root group=root mode=644 backup=yes

### monitoring

#### syslog-ng

- name: install syslog-ng
  apt: name={{ item }} state=present
  with_items:
    - syslog-ng-core
    - syslog-ng
  tags: [ 'packages', 'sysadmin', 'monitoring', 'syslog-ng' ]

##### /etc/syslog-ng/syslog-ng.conf

- name: copy etc_syslog-ng_syslog-ng.conf, backup remote version if it is not the same.
  copy: src=etc_syslog-ng_syslog-ng.conf dest=/etc/syslog-ng/syslog-ng.conf owner=root group=root mode=644 backup=yes
  notify: shorewall restart
  tags: [ 'packages', 'sysadmin', 'monitoring', 'syslog-ng' ]

#### htop - interactive process viewer

- name: install htop
  apt: name={{ item }} state=present
  with_items:
    - htop

- name: install sysadmin monitoring tools
  apt: name={{ item }} state=present
  with_items:
    - hddtemp
    - smartmontools
    - lm-sensors
  tags: [ 'packages', 'sysadmin', 'monitoring' ]

# Media

## Video

### vlc

- name: Install media tool vlc
  apt: name={{ item }} state=present
  with_items:
    - vlc
  tags: [ 'packages', 'media' ]

## Graphics

### Gimp

- name: Install media tool vlc
  apt: name={{ item }} state=present
  with_items:
    - gimp
  tags: [ 'packages', 'media' ]

### Browsers

- name: Install browsers
  apt: name={{ item }} state=present
  with_items:
    - lynx
    - links
  tags: [ 'packages', 'browsers' ]

#### Browser plugins

- name: Install browser plugins
  apt: name={{ item }} state=present
  with_items:
    - icedtea-plugin
  tags: [ 'packages', 'browsers_plugins' ]

# editors

- name: install editors
  apt: name={{ item }} state=present
  with_items:
    - vim
    - nano

# Cups

# Configure Uprint Services

- name: Copy /etc/cups/cupsd.conf and backup remote version if different.
  copy: src=etc_cups_cupsd.conf dest=/etc/cups/cupsd.conf owner=root group=root mode=644 backup=yes
  tags: [ 'packages', 'cups' ]
  notify: cups restart

# Test
# lpstat -p
# printer McGill_color is idle.  enabled since Tue 28 Oct 2014 04:18:02 PM EDT
# printer mcgill_mono is idle.  enabled since Tue 28 Oct 2014 04:18:03 PM EDT


